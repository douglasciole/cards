{"version":3,"sources":["logo.svg","components/card.js","components/cardList.js","components/cardDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","card","props","state","buttonText","className","this","label","src","image","onClick","text","textArea","document","createElement","value","style","top","left","position","body","appendChild","focus","select","execCommand","setState","setTimeout","err","console","error","removeChild","textToClipboard","refer","Component","cardList","cardDisplay","query","queryString","parse","location","search","name","property","content","App","exact","path","component","CardList","CardDisplay","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d608ca5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nexport default class card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonText: \"Use this one\"\n        }\n    }\n\n    render() {\n        const textToClipboard = (text) => {\n            var textArea = document.createElement(\"textarea\");\n            textArea.value = text;\n            \n            // Avoid scrolling to bottom\n            textArea.style.top = \"0\";\n            textArea.style.left = \"0\";\n            textArea.style.position = \"fixed\";\n          \n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n          \n            try {\n              var successful = document.execCommand('copy');\n              var msg = successful ? 'successful' : 'unsuccessful';\n              \n              this.setState({buttonText: \"Ctrl + C, Done!\"});\n              setTimeout(() => { \n                this.setState({buttonText: \"Use this one\"});\n              }, 1500);\n            } catch (err) {\n              console.error('Fallback: Oops, unable to copy', err);\n            }\n          \n            document.body.removeChild(textArea);\n        }\n\n        return (\n            <div className=\"card\">\n                <div className=\"card-title\">{this.props.label}</div>\n                <img className=\"card-image\" src={this.props.image} />\n                <button onClick={() => { textToClipboard(this.props.refer); }} className=\"card-button\">{this.state.buttonText}</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Card from './card'\n\nexport default class cardList extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"title\">Cards</div>\n                <div className=\"cards-container\">\n                    <Card refer=\"sp\" label=\"Saint Patrick's\" image=\"/images/sp.jpg\" />\n                    <Card refer=\"xmas\" label=\"Christmas\" image=\"/images/xmas.png\" />\n                    <Card refer=\"mday\" label=\"Mother's Day\" image=\"/images/mday.jpg\" />\n                </div>\n\n                <div className=\"cards-container\">\n                    <Card refer=\"sp\" label=\"Saint Patrick's\" image=\"/images/sp.jpg\" />\n                    <Card refer=\"xmas\" label=\"Christmas\" image=\"/images/xmas.png\" />\n                    <Card refer=\"mday\" label=\"Mother's Day\" image=\"/images/mday.jpg\" />\n                </div>\n\n                <div className=\"cards-container\">\n                    <Card refer=\"sp\" label=\"Saint Patrick's\" image=\"/images/sp.jpg\" />\n                    <Card refer=\"xmas\" label=\"Christmas\" image=\"/images/xmas.png\" />\n                    <Card refer=\"mday\" label=\"Mother's Day\" image=\"/images/mday.jpg\" />\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport MetaTags from 'react-meta-tags';\n\nexport default class cardDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: queryString.parse(this.props.location.search)\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <MetaTags>\n                    <title>{this.state.query.name}</title>\n                    <meta property=\"og:url\" content=\"MyApp\" />\n                    <meta property=\"og:type\" content=\"MyApp\" />\n                    <meta property=\"og:title\" content=\"MyApp\" />\n                    <meta property=\"og:description\" content=\"MyApp\" />\n                    <meta property=\"og:image\" content=\"path/to/image.jpg\" />\n                </MetaTags>\n                {this.state.query.name}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport './fonts/Inconsolata/stylesheet.css';\nimport CardList from './components/cardList';\nimport CardDisplay from './components/cardDisplay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={CardList} />\n          <Route path=\"/display\" component={CardDisplay} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}