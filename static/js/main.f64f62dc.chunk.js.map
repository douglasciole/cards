{"version":3,"sources":["images/sp.jpg","images/mday.jpg","components/card.js","data.js","components/cardList.js","components/cardDisplay.js","App.js","serviceWorker.js","index.js","images/xmas.png"],"names":["module","exports","card","props","state","buttonText","className","this","label","src","image","onClick","text","textArea","document","createElement","value","style","top","left","position","body","appendChild","focus","select","execCommand","setState","setTimeout","err","console","error","removeChild","textToClipboard","window","location","href","refer","Component","cardsData","title","message","spIMG","xmasIMG","mdayIMG","CardList","Object","keys","map","key","index","cardDisplay","query","queryString","parse","search","property","content","App","exact","path","process","component","CardDisplay","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mPCEtBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,gBAHD,E,qDAOT,IAAD,OA6BL,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cAAcC,KAAKJ,MAAMK,OACxC,yBAAKF,UAAU,aAAaG,IAAKF,KAAKJ,MAAMO,QAC5C,4BAAQC,QAAS,YAhCD,SAACC,GACrB,IAAIC,EAAWC,SAASC,cAAc,YACtCF,EAASG,MAAQJ,EAGjBC,EAASI,MAAMC,IAAM,IACrBL,EAASI,MAAME,KAAO,IACtBN,EAASI,MAAMG,SAAW,QAE1BN,SAASO,KAAKC,YAAYT,GAC1BA,EAASU,QACTV,EAASW,SAET,IACmBV,SAASW,YAAY,QAGtC,EAAKC,SAAS,CAACrB,WAAY,oBAC3BsB,YAAW,WACT,EAAKD,SAAS,CAACrB,WAAY,mBAC1B,MACH,MAAOuB,GACPC,QAAQC,MAAM,iCAAkCF,GAGlDd,SAASO,KAAKU,YAAYlB,GAOGmB,CAAgBC,OAAOC,SAASC,KAAO,iBAAmB,EAAKhC,MAAMiC,QAAW9B,UAAU,eAAeC,KAAKH,MAAMC,iB,GAzC3HgC,a,kDC6CnBC,EA3CG,CACd,GAAM,CACFC,MAAO,kBACPC,QAAS,cACT9B,MAAO+B,KAEX,KAAQ,CACJF,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,KAEX,KAAQ,CACJH,MAAO,eACPC,QAAS,eACT9B,MAAOiC,KAEX,MAAS,CACLJ,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,KAEX,MAAS,CACLH,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,KAEX,MAAS,CACLH,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,KAEX,MAAS,CACLH,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,KAEX,MAAS,CACLH,MAAO,YACPC,QAAS,oBACT9B,MAAOgC,MCvCME,E,uKAEb,OACI,6BACI,yBAAKtC,UAAU,SAAf,SAIA,yBAAKA,UAAU,mBAEVuC,OAAOC,KAAKR,GAAWS,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAAC,EAAD,CAAMb,MAAOY,EAAKxC,MAAO8B,EAAUU,GAAKT,MAAO7B,MAAO4B,EAAUU,GAAKtC,iB,GAV/F2B,a,kCCCjBa,E,kDACjB,WAAY/C,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT+C,MAAOC,IAAYC,MAAMlD,EAAM+B,SAASoB,SAH7B,E,qDAoBf,OACI,6BACI,kBAAC,IAAD,KACI,+BAAQhB,EAAU/B,KAAKH,MAAM+C,MAAMf,OAAOG,OAC1C,0BAAMgB,SAAS,SAASC,QAAS,sDAAwDjD,KAAKH,MAAM+C,MAAMf,QAC1G,0BAAMmB,SAAS,UAAUC,QAAQ,YACjC,0BAAMD,SAAS,WAAWC,QAASlB,EAAU/B,KAAKH,MAAM+C,MAAMf,OAAOG,QACrE,0BAAMgB,SAAS,iBAAiBC,QAASlB,EAAU/B,KAAKH,MAAM+C,MAAMf,OAAOI,UAC3E,0BAAMe,SAAS,WAAWC,QAAS,iCAAmClB,EAAU/B,KAAKH,MAAM+C,MAAMf,OAAO1B,c,GA7BnF2B,aCe1BoB,MAbf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAMC,UAA8BC,UAAWjB,IAC5D,kBAAC,IAAD,CAAOe,KAAMC,iBAAqCC,UAAWC,QCDnDC,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtD,SAASuD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLD,QAAQC,MAAMA,EAAMU,a,kBEzI5BxC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f64f62dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sp.b9c9d2fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mday.ce2c09c5.jpg\";","import React, { Component } from 'react'\n\nexport default class card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonText: \"Use this one\"\n        }\n    }\n\n    render() {\n        const textToClipboard = (text) => {\n            var textArea = document.createElement(\"textarea\");\n            textArea.value = text;\n            \n            // Avoid scrolling to bottom\n            textArea.style.top = \"0\";\n            textArea.style.left = \"0\";\n            textArea.style.position = \"fixed\";\n          \n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n          \n            try {\n              var successful = document.execCommand('copy');\n              var msg = successful ? 'successful' : 'unsuccessful';\n              \n              this.setState({buttonText: \"Ctrl + C, Done!\"});\n              setTimeout(() => { \n                this.setState({buttonText: \"Use this one\"});\n              }, 1500);\n            } catch (err) {\n              console.error('Fallback: Oops, unable to copy', err);\n            }\n          \n            document.body.removeChild(textArea);\n        }\n\n        return (\n            <div className=\"card\">\n                <div className=\"card-title\">{this.props.label}</div>\n                <img className=\"card-image\" src={this.props.image} />\n                <button onClick={() => { textToClipboard(window.location.href + \"display?refer=\" + this.props.refer); }} className=\"card-button\">{this.state.buttonText}</button>\n            </div>\n        )\n    }\n}\n","import xmasIMG from './images/xmas.png';\nimport spIMG from './images/sp.jpg';\nimport mdayIMG from './images/mday.jpg';\n\nconst cardsData = {\n    'sp': {\n        title: 'Saint Patrick`s',\n        message: 'Let`s drink',\n        image: spIMG\n    },\n    'xmas': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    },\n    'mday': {\n        title: 'Mother`s day',\n        message: 'Mother`s day',\n        image: mdayIMG\n    },\n    'xmas4': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    },\n    'xmas5': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    },\n    'xmas6': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    },\n    'xmas7': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    },\n    'xmas8': {\n        title: 'Christmas',\n        message: 'Have a merry xmas',\n        image: xmasIMG\n    }\n}\n\nexport default cardsData;","import React, { Component } from 'react'\nimport Card from './card'\nimport cardsData from '../data';\n\nexport default class CardList extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"title\">Cards</div>\n                \n                \n\n                <div className=\"cards-container\">\n                    \n                    {Object.keys(cardsData).map((key, index) => <Card refer={key} label={cardsData[key].title} image={cardsData[key].image} />)}\n                    \n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport MetaTags from 'react-meta-tags';\nimport cardsData from '../data';\n\nexport default class cardDisplay extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: queryString.parse(props.location.search)\n        };\n    }\n\n    render() {\n        const getExternalDir = () => {\n            var getUrl = window.location;\n            var baseUrl = getUrl .protocol + \"//\" + getUrl.host;\n            return baseUrl;\n        }\n\n        const getFullDir = () => {\n            var getUrl = window.location;\n            var baseUrl = getUrl .protocol + \"//\" + getUrl.host + \"/\" + getUrl.pathname.split('/')[1];\n            return baseUrl;\n        }\n\n        return (\n            <div>\n                <MetaTags>\n                    <title>{cardsData[this.state.query.refer].title}</title>\n                    <meta property=\"og:url\" content={\"https://douglasciole.github.io/cards/display?refer=\" + this.state.query.refer} />\n                    <meta property=\"og:type\" content=\"article\" />\n                    <meta property=\"og:title\" content={cardsData[this.state.query.refer].title} />\n                    <meta property=\"og:description\" content={cardsData[this.state.query.refer].message} />\n                    <meta property=\"og:image\" content={\"https://douglasciole.github.io\" + cardsData[this.state.query.refer].image} />\n                </MetaTags>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport './fonts/Inconsolata/stylesheet.css';\nimport CardList from './components/cardList';\nimport CardDisplay from './components/cardDisplay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + '/'} component={CardList} />\n          <Route path={process.env.PUBLIC_URL + '/display'} component={CardDisplay} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/xmas.adb62aff.png\";"],"sourceRoot":""}